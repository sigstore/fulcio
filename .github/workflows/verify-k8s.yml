#
# Copyright 2021 The Sigstore Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Verify-K8s

on: [push, pull_request]

jobs:
  verify-k8s-manifests:
    name: k8s manifest check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.4.0
      - uses: actions/setup-go@v2
        with:
          go-version: 1.16.x
      - name: Install kubeval
        run: go get github.com/instrumenta/kubeval
      - run: kubeval config/*.yaml

  verify-k8s-deployment:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Keep running if one leg fails.
      matrix:
        issuer:
        - "OIDC Issuer"
        - "Meta Issuer"

        include:
        - issuer: "OIDC Issuer"
          issuer-config: |
            "OIDCIssuers": {"https://kubernetes.default.svc": {"IssuerURL": "https://kubernetes.default.svc","ClientID": "sigstore","Type": "kubernetes"}}
        - issuer: "Meta Issuer"
          issuer-config: |
            "MetaIssuers": {"https://kubernetes.*.svc": {"ClientID": "sigstore","Type": "kubernetes"}}

    env:
      # https://github.com/google/go-containerregistry/pull/125 allows insecure registry for
      # '*.local' hostnames. This works both for `ko` and our own tag-to-digest resolution logic,
      # thus allowing us to test without bypassing tag-to-digest resolution.
      REGISTRY_NAME: registry.local
      REGISTRY_PORT: 5000
      KO_DOCKER_REPO: registry.local:5000/fulcio

    steps:
      - uses: actions/checkout@v2.4.0
      - uses: actions/setup-go@v2
        with:
          go-version: 1.16.x

      - uses: imjasonh/setup-ko@v0.4

      - name: Install KinD
        run: |
          # Disable swap otherwise memory enforcement doesn't work
          # See: https://kubernetes.slack.com/archives/CEKK1KTN2/p1600009955324200
          sudo swapoff -a
          sudo rm -f /swapfile
          # Use in-memory storage to avoid etcd server timeouts.
          # https://kubernetes.slack.com/archives/CEKK1KTN2/p1615134111016300
          # https://github.com/kubernetes-sigs/kind/issues/845
          sudo mkdir -p /tmp/etcd
          sudo mount -t tmpfs tmpfs /tmp/etcd
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/v0.11.1/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin

      - name: Configure KinD Cluster
        run: |
          set -x
          # KinD configuration.
          cat > kind.yaml <<EOF
          apiVersion: kind.x-k8s.io/v1alpha4
          kind: Cluster
          # Configure registry for KinD.
          containerdConfigPatches:
          - |-
            [plugins."io.containerd.grpc.v1.cri".registry.mirrors."$REGISTRY_NAME:$REGISTRY_PORT"]
              endpoint = ["http://$REGISTRY_NAME:$REGISTRY_PORT"]
          # This is needed in order to support projected volumes with service account tokens.
          # See: https://kubernetes.slack.com/archives/CEKK1KTN2/p1600268272383600
          kubeadmConfigPatches:
            - |
              apiVersion: kubeadm.k8s.io/v1beta2
              kind: ClusterConfiguration
              metadata:
                name: config
              apiServer:
                extraArgs:
                  "service-account-issuer": "https://kubernetes.default.svc"
                  "service-account-signing-key-file": "/etc/kubernetes/pki/sa.key"
                  "service-account-jwks-uri": "https://kubernetes.default.svc/openid/v1/jwks"
                  "service-account-key-file": "/etc/kubernetes/pki/sa.pub"
              networking:
                dnsDomain: "cluster.local"
          nodes:
          - role: control-plane
            image: kindest/node:v1.22.0@sha256:f97edf7f7ed53c57762b24f90a34fad101386c5bd4d93baeb45449557148c717
            extraMounts:
            - containerPath: /var/lib/etcd
              hostPath: /tmp/etcd
          - role: worker
            image: kindest/node:v1.22.0@sha256:f97edf7f7ed53c57762b24f90a34fad101386c5bd4d93baeb45449557148c717
          EOF

      - name: Create KinD Cluster
        run: |
          kind create cluster --config kind.yaml

      - name: Setup local registry
        run: |
          # Run a registry.
          docker run -d --restart=always \
            -p $REGISTRY_PORT:$REGISTRY_PORT --name $REGISTRY_NAME registry:2
          # Connect the registry to the KinD network.
          docker network connect "kind" $REGISTRY_NAME
          # Make the $REGISTRY_NAME -> 127.0.0.1, to tell `ko` to publish to
          # local reigstry, even when pushing $REGISTRY_NAME:$REGISTRY_PORT/some/image
          sudo echo "127.0.0.1 $REGISTRY_NAME" | sudo tee -a /etc/hosts

      - name: Deploy fulcio-dev
        env:
          CGO_ENABLED: 1
        run: |
          # Reduce the resource requests of Fulcio
          sed -i -e 's,memory: "1G",memory: "100m",g' ${{ github.workspace }}/config/deployment.yaml
          sed -i -e 's,cpu: ".5",memory: "50m",g' ${{ github.workspace }}/config/deployment.yaml
          # Switch to the ephemeralca for testing.
          sed -i -e 's,--ca=googleca,--ca=ephemeralca,g' ${{ github.workspace }}/config/deployment.yaml
          # Drop the ct-log flag's value to elide CT-log uploads.
          sed -i -E 's,"--ct-log-url=[^"]+","--ct-log-url=",g' ${{ github.workspace }}/config/deployment.yaml

          # From: https://banzaicloud.com/blog/kubernetes-oidc/
          # To be able to fetch the public keys and validate the JWT tokens against
          # the Kubernetes clusterâ€™s issuer we have to allow external unauthenticated
          # requests. To do this, we bind this special role with a ClusterRoleBinding
          # to unauthenticated users (make sure that this is safe in your environment,
          # but only public keys are visible on this URL)
          kubectl create clusterrolebinding oidc-reviewer \
            --clusterrole=system:service-account-issuer-discovery \
            --group=system:unauthenticated

          # Overwrite the configuration to be what we need for KinD.
          cat <<EOF > config/fulcio-config.yaml
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: fulcio-config
            namespace: fulcio-dev
          data:
            config.json: |-
                {
                  ${{ matrix.issuer-config }}
                }
          EOF

          kubectl create ns fulcio-dev

          ko apply -Bf config/

          kubectl wait --for=condition=Available --timeout=5m -n fulcio-dev deployment/fulcio-server

          kubectl get po -n fulcio-dev

      - name: Run signing job
        env:
          CGO_ENABLED: 1
        run: |
          DIGEST=$(ko publish .)

          cat <<EOF | kubectl apply -f -
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: check-oidc
          spec:
            template:
              spec:
                restartPolicy: Never
                automountServiceAccountToken: false
                containers:
                - name: check-oidc
                  # This is a version of the cosign image published from CI with https://github.com/sigstore/cosign/pull/955
                  # TODO(mattmoor): Switch this to a release build after 1.3
                  image: gcr.io/projectsigstore/cosign/ci/cosign:46e274094551d5b29bd89eaa6499c0f39e60db2f
                  command: [/busybox/sh, -c]
                  args:
                  - |
                    /ko-app/cosign sign \
                      `# Target our cluster's Fulcio` \
                      --fulcio-url http://fulcio-server.fulcio-dev.svc \
                      `# Pass in the KinD OIDC token` \
                      --identity-token \$(cat /var/run/kind-oidc/token) \
                      `# Skip verification of the SCT since we've disabled that above.` \
                      --insecure-skip-verify=true \
                      `# Skip upload because we can't avoid Rekor on that path.` \
                      --upload=false \
                      ${DIGEST}

                  env:
                  - name: COSIGN_EXPERIMENTAL
                    value: "true"
                  volumeMounts:
                  - name: oidc-info
                    mountPath: /var/run/kind-oidc

                volumes:
                  - name: oidc-info
                    projected:
                      sources:
                        - serviceAccountToken:
                            path: token
                            expirationSeconds: 600 # Use as short-lived as possible.
                            audience: sigstore
          EOF

          kubectl wait --for=condition=Complete --timeout=90s job/check-oidc

      - name: Collect logs
        if: ${{ always() }}
        run: |
          mkdir -p /tmp/logs
          kind export logs /tmp/logs

      - name: Upload artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: /tmp/logs
