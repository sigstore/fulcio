// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright 2021 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/sigstore/fulcio/pkg/generated/models"
)

// SigningCertCreatedCode is the HTTP code returned for type SigningCertCreated
const SigningCertCreatedCode int = 201

/*SigningCertCreated Generated Certificate Chain

swagger:response signingCertCreated
*/
type SigningCertCreated struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewSigningCertCreated creates SigningCertCreated with default headers values
func NewSigningCertCreated() *SigningCertCreated {

	return &SigningCertCreated{}
}

// WithPayload adds the payload to the signing cert created response
func (o *SigningCertCreated) WithPayload(payload string) *SigningCertCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the signing cert created response
func (o *SigningCertCreated) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SigningCertCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// SigningCertBadRequestCode is the HTTP code returned for type SigningCertBadRequest
const SigningCertBadRequestCode int = 400

/*SigningCertBadRequest The content supplied to the server was invalid

swagger:response signingCertBadRequest
*/
type SigningCertBadRequest struct {
	/*

	 */
	ContentType string `json:"Content-Type"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSigningCertBadRequest creates SigningCertBadRequest with default headers values
func NewSigningCertBadRequest() *SigningCertBadRequest {

	return &SigningCertBadRequest{}
}

// WithContentType adds the contentType to the signing cert bad request response
func (o *SigningCertBadRequest) WithContentType(contentType string) *SigningCertBadRequest {
	o.ContentType = contentType
	return o
}

// SetContentType sets the contentType to the signing cert bad request response
func (o *SigningCertBadRequest) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithPayload adds the payload to the signing cert bad request response
func (o *SigningCertBadRequest) WithPayload(payload *models.Error) *SigningCertBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the signing cert bad request response
func (o *SigningCertBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SigningCertBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Content-Type

	contentType := o.ContentType
	if contentType != "" {
		rw.Header().Set("Content-Type", contentType)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SigningCertUnauthorizedCode is the HTTP code returned for type SigningCertUnauthorized
const SigningCertUnauthorizedCode int = 401

/*SigningCertUnauthorized The request could not be authorized

swagger:response signingCertUnauthorized
*/
type SigningCertUnauthorized struct {
	/*

	 */
	ContentType string `json:"Content-Type"`
	/*Information about required authentication to access server

	 */
	WWWAuthenticate string `json:"WWW-Authenticate"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSigningCertUnauthorized creates SigningCertUnauthorized with default headers values
func NewSigningCertUnauthorized() *SigningCertUnauthorized {

	return &SigningCertUnauthorized{}
}

// WithContentType adds the contentType to the signing cert unauthorized response
func (o *SigningCertUnauthorized) WithContentType(contentType string) *SigningCertUnauthorized {
	o.ContentType = contentType
	return o
}

// SetContentType sets the contentType to the signing cert unauthorized response
func (o *SigningCertUnauthorized) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithWWWAuthenticate adds the wWWAuthenticate to the signing cert unauthorized response
func (o *SigningCertUnauthorized) WithWWWAuthenticate(wWWAuthenticate string) *SigningCertUnauthorized {
	o.WWWAuthenticate = wWWAuthenticate
	return o
}

// SetWWWAuthenticate sets the wWWAuthenticate to the signing cert unauthorized response
func (o *SigningCertUnauthorized) SetWWWAuthenticate(wWWAuthenticate string) {
	o.WWWAuthenticate = wWWAuthenticate
}

// WithPayload adds the payload to the signing cert unauthorized response
func (o *SigningCertUnauthorized) WithPayload(payload *models.Error) *SigningCertUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the signing cert unauthorized response
func (o *SigningCertUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SigningCertUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Content-Type

	contentType := o.ContentType
	if contentType != "" {
		rw.Header().Set("Content-Type", contentType)
	}

	// response header WWW-Authenticate

	wWWAuthenticate := o.WWWAuthenticate
	if wWWAuthenticate != "" {
		rw.Header().Set("WWW-Authenticate", wWWAuthenticate)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*SigningCertDefault There was an internal error in the server while processing the request

swagger:response signingCertDefault
*/
type SigningCertDefault struct {
	_statusCode int
	/*

	 */
	ContentType string `json:"Content-Type"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSigningCertDefault creates SigningCertDefault with default headers values
func NewSigningCertDefault(code int) *SigningCertDefault {
	if code <= 0 {
		code = 500
	}

	return &SigningCertDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the signing cert default response
func (o *SigningCertDefault) WithStatusCode(code int) *SigningCertDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the signing cert default response
func (o *SigningCertDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithContentType adds the contentType to the signing cert default response
func (o *SigningCertDefault) WithContentType(contentType string) *SigningCertDefault {
	o.ContentType = contentType
	return o
}

// SetContentType sets the contentType to the signing cert default response
func (o *SigningCertDefault) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithPayload adds the payload to the signing cert default response
func (o *SigningCertDefault) WithPayload(payload *models.Error) *SigningCertDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the signing cert default response
func (o *SigningCertDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SigningCertDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Content-Type

	contentType := o.ContentType
	if contentType != "" {
		rw.Header().Set("Content-Type", contentType)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
