// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright 2021 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/sigstore/fulcio/pkg/generated/models"
)

// HomepageOKCode is the HTTP code returned for type HomepageOK
const HomepageOKCode int = 200

/*HomepageOK Ok message

swagger:response homepageOK
*/
type HomepageOK struct {
	/*

	 */
	ContentType string `json:"Content-Type"`

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewHomepageOK creates HomepageOK with default headers values
func NewHomepageOK() *HomepageOK {

	return &HomepageOK{}
}

// WithContentType adds the contentType to the homepage o k response
func (o *HomepageOK) WithContentType(contentType string) *HomepageOK {
	o.ContentType = contentType
	return o
}

// SetContentType sets the contentType to the homepage o k response
func (o *HomepageOK) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithPayload adds the payload to the homepage o k response
func (o *HomepageOK) WithPayload(payload string) *HomepageOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the homepage o k response
func (o *HomepageOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *HomepageOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Content-Type

	contentType := o.ContentType
	if contentType != "" {
		rw.Header().Set("Content-Type", contentType)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// HomepageBadRequestCode is the HTTP code returned for type HomepageBadRequest
const HomepageBadRequestCode int = 400

/*HomepageBadRequest The content supplied to the server was invalid

swagger:response homepageBadRequest
*/
type HomepageBadRequest struct {
	/*

	 */
	ContentType string `json:"Content-Type"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewHomepageBadRequest creates HomepageBadRequest with default headers values
func NewHomepageBadRequest() *HomepageBadRequest {

	return &HomepageBadRequest{}
}

// WithContentType adds the contentType to the homepage bad request response
func (o *HomepageBadRequest) WithContentType(contentType string) *HomepageBadRequest {
	o.ContentType = contentType
	return o
}

// SetContentType sets the contentType to the homepage bad request response
func (o *HomepageBadRequest) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithPayload adds the payload to the homepage bad request response
func (o *HomepageBadRequest) WithPayload(payload *models.Error) *HomepageBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the homepage bad request response
func (o *HomepageBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *HomepageBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Content-Type

	contentType := o.ContentType
	if contentType != "" {
		rw.Header().Set("Content-Type", contentType)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*HomepageDefault There was an internal error in the server while processing the request

swagger:response homepageDefault
*/
type HomepageDefault struct {
	_statusCode int
	/*

	 */
	ContentType string `json:"Content-Type"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewHomepageDefault creates HomepageDefault with default headers values
func NewHomepageDefault(code int) *HomepageDefault {
	if code <= 0 {
		code = 500
	}

	return &HomepageDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the homepage default response
func (o *HomepageDefault) WithStatusCode(code int) *HomepageDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the homepage default response
func (o *HomepageDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithContentType adds the contentType to the homepage default response
func (o *HomepageDefault) WithContentType(contentType string) *HomepageDefault {
	o.ContentType = contentType
	return o
}

// SetContentType sets the contentType to the homepage default response
func (o *HomepageDefault) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithPayload adds the payload to the homepage default response
func (o *HomepageDefault) WithPayload(payload *models.Error) *HomepageDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the homepage default response
func (o *HomepageDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *HomepageDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Content-Type

	contentType := o.ContentType
	if contentType != "" {
		rw.Header().Set("Content-Type", contentType)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
